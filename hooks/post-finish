#!/usr/bin/env python3
# (magic file name)
# pylint: disable=invalid-name

""" This script is invoked by tusd upon successful reception of a complete file.
Example JSON data:

    "Upload": {
        "ID": "9a1a39798141223fb20f133f2bc58535+2~Qe1PIASV0XqmPse9fP-oq6PMzy-ZvdD",
        "IsFinal": false,
        "IsPartial": false,
        "MetaData": {
            "fileName": "IMG_1133.MOV",
        },
        "Offset": 9844291,
        "PartialUploads": null,
        "Size": 9844291,
        "SizeIsDeferred": false,
        "Storage": {
            "Bucket": "incoming",
            "Key": "9a1a39798141223fb20f133f2bc58535",
            "Type": "s3store"
        }
    }
"""
import json
import sys
import os
from loguru import logger
import requests

logger.configure(handlers=[{"sink": sys.stderr, "serialize": True}])


def _croak(error_message: str):
    """ Fail with an error message printed both using the logger, and output to stderr """
    logger.warning(error_message)
    print(error_message)
    sys.exit(1)


FK_INGEST_API = os.environ.get("FK_INGEST_API", None)
if FK_INGEST_API is None:
    _croak('FK_INGEST_API is not set!')

FK_API_KEY = os.environ.get("FK_API_KEY", None)
if FK_API_KEY is None:
    _croak('FK_API_KEY is not set!')


if __name__ == '__main__':
    request = json.load(sys.stdin)
    print(json.dumps(request, indent=2), file=sys.stderr)

    request_data = {
        'fileName': request["Upload"]["MetaData"]["fileName"],
        'objectKey': request["Upload"]["Storage"]["Key"],
        'uploadID': request["Upload"]["ID"],
    }

    response = requests.post(
        f'{FK_INGEST_API}/ingest',
        request_data,
        headers={
            'Cookie': request["HTTPRequest"]["Header"]["Cookie"][0],
            'X-Api-Key': FK_API_KEY
        }
    )

    print(json.dumps(response.text), file=sys.stderr)
