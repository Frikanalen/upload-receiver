#!/usr/bin/env python3
"""This script is invoked by tusd upon successful reception of a complete file."""

import logging
import os
import sys

from typing import Tuple

from pydantic import BaseModel
from hooks.hookschema import HookRequest


class MetaData(BaseModel):
    """Metadata for the upload, including video ID and original file name."""

    videoID: str
    origFileName: str
    uploadToken: str


logging.basicConfig(level=logging.DEBUG)

HOSTNAME = "file01"
USERNAME = "fkupload"


def read_upload_status() -> Tuple[str, str, str]:
    """Reads the JSON data from tusd, and returns a tuple of numeric video ID, original
    file name, and location of the uploaded file."""

    hook_request = HookRequest.model_validate_json(sys.stdin.read())

    upload = hook_request.Event.Upload
    metadata = MetaData.model_validate(upload.MetaData_1)

    video_id: str = metadata.videoID
    orig_filename: str = metadata.origFileName
    path: str = upload.Storage["Path"]

    return (video_id, orig_filename, path)


def upload_video(video_id: str, path: str, orig_filename: str):
    """Creates a temporary directory on file01, copies the file, and moves it
    into the move_and_process watchfolder."""

    legacy_temp_directory = f"/srv/fkupload/adaptor_incoming/{video_id}"
    legacy_temp_filename = os.path.join(legacy_temp_directory, orig_filename)
    legacy_watchfolder = f"/srv/fkupload/finished_uploads/{video_id}"

    logging.debug(f"Creating directory {HOSTNAME}:{legacy_temp_directory}")
    os.mkdir(legacy_temp_directory)

    logging.debug(f"Copying {path} to {HOSTNAME}:{legacy_temp_filename}...")
    os.rename(path, legacy_temp_filename)

    logging.debug(f"Moving from {legacy_temp_directory} {legacy_watchfolder}")
    os.rename(legacy_temp_directory, legacy_watchfolder)

    logging.debug(f"Cleaning up, deleting {path}")
    os.unlink(path + ".info")


if __name__ == "__main__":
    logging.info("Pre-finish hook starting")
    video_id, orig_filename, path = read_upload_status()
    logging.info(f"Video ID: {video_id} File name: {orig_filename}")
    upload_video(video_id, path, orig_filename)
    logging.info("Copy complete")
