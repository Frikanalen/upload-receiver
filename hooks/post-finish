#!/usr/bin/env python3
"""This script is invoked by tusd upon successful reception of a complete file."""

import json
import logging
import os
import sys

logging.basicConfig(level=logging.DEBUG)

HOSTNAME = "file01"
USERNAME = "fkupload"


def read_upload_status():
    """Reads the JSON data from tusd, and returns a tuple of numeric video ID, original
    file name, and S3 key.

    Outer JSON data:
     {
        "Type": "post-finish",
        "Event": {
          "Upload": {
            "ID": "71637df20c5052a58a3a40625ecd1dd5",
            ...


    Example of inner JSON data:

    "Upload": {
        "ID": "9a1a39798141223fb20f133f2bc58535+2~Qe1PIASV0XqmPse9fP-oq6PMzy-ZvdD",
        "IsFinal": false,
        "IsPartial": false,
        "MetaData": {
            "origFileName": "IMG_1133.MOV",
            "uploadToken": "6182701c94024dd4ac75866ed5071bf1",
            "videoID": "626739"
        },
        "Offset": 9844291,
        "PartialUploads": null,
        "Size": 9844291,
        "SizeIsDeferred": false,
        "Storage": {
            "Type": "filestore",
            "Path": "/my/upload/directory/14b1c4c77771671a8479bc0444bbc5ce",
        }
    }
    """
    s = json.load(sys.stdin)
    print(json.dumps(s, indent=2), file=sys.stderr)

    s = s["Event"]["Upload"]

    return (s["MetaData"]["videoID"], s["MetaData"]["origFileName"], s["Storage"]["Path"])


def upload_video(video_id, path, orig_filename):
    """Creates a temporary directory on file01, copies the file, and moves it
    into the move_and_process watchfolder."""

    legacy_temp_directory = f"/srv/fkupload/adaptor_incoming/{video_id}"
    legacy_temp_filename = os.path.join(legacy_temp_directory, orig_filename)
    legacy_watchfolder = f"/srv/fkupload/finished_uploads/{video_id}"

    logging.debug(f"Creating directory {HOSTNAME}:{legacy_temp_directory}")
    os.mkdir(legacy_temp_directory)

    logging.debug(f"Copying {path} to {HOSTNAME}:{legacy_temp_filename}...")
    os.rename(path, legacy_temp_filename)

    logging.debug(f"Moving from {legacy_temp_directory} {legacy_watchfolder}")
    os.rename(legacy_temp_directory, legacy_watchfolder)

    logging.debug(f"Cleaning up, deleting {path}")
    os.unlink(path + ".info")


if __name__ == "__main__":
    logging.info("Pre-finish hook starting")
    video_id, orig_filename, path = read_upload_status()
    logging.info(f"Video ID: {video_id} File name: {orig_filename}")
    upload_video(video_id, path, orig_filename)
    logging.info("Copy complete")
