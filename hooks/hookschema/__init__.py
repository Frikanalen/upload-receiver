# generated by datamodel-codegen:
#   filename:  hook.schema.json
#   timestamp: 2025-06-19T00:15:30+00:00

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Header(RootModel[Optional[Dict[str, List[str]]]]):
    root: Optional[Dict[str, List[str]]] = None


class MetaData(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class FileInfo(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ID: str
    Size: int
    SizeIsDeferred: bool
    Offset: int
    MetaData_1: MetaData = Field(..., alias='MetaData')
    IsPartial: bool
    IsFinal: bool
    PartialUploads: List[str]
    Storage: Dict[str, str]


class HTTPRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Method: str
    URI: str
    RemoteAddr: str
    Header_1: Header = Field(..., alias='Header')


class HookEvent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Upload: FileInfo
    HTTPRequest_1: HTTPRequest = Field(..., alias='HTTPRequest')


class HookRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Type: str
    Event: HookEvent


class Model(RootModel[HookRequest]):
    root: HookRequest
